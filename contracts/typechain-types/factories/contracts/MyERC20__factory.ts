/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MyERC20, MyERC20Interface } from "../../contracts/MyERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "Rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "airdrop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "conversionRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "convertErc20ToEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "convertEthToErc20",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526064600755670de0b6b3a76400006008553480156200002257600080fd5b506040516200210c3803806200210c83398181016040528101906200004891906200024c565b818181600390816200005b91906200051c565b5080600490816200006d91906200051c565b50505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000603565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012282620000d7565b810181811067ffffffffffffffff82111715620001445762000143620000e8565b5b80604052505050565b600062000159620000b9565b905062000167828262000117565b919050565b600067ffffffffffffffff8211156200018a5762000189620000e8565b5b6200019582620000d7565b9050602081019050919050565b60005b83811015620001c2578082015181840152602081019050620001a5565b60008484015250505050565b6000620001e5620001df846200016c565b6200014d565b905082815260208101848484011115620002045762000203620000d2565b5b62000211848285620001a2565b509392505050565b600082601f830112620002315762000230620000cd565b5b815162000243848260208601620001ce565b91505092915050565b60008060408385031215620002665762000265620000c3565b5b600083015167ffffffffffffffff811115620002875762000286620000c8565b5b620002958582860162000219565b925050602083015167ffffffffffffffff811115620002b957620002b8620000c8565b5b620002c78582860162000219565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200032457607f821691505b6020821081036200033a5762000339620002dc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000365565b620003b0868362000365565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003fd620003f7620003f184620003c8565b620003d2565b620003c8565b9050919050565b6000819050919050565b6200041983620003dc565b62000431620004288262000404565b84845462000372565b825550505050565b600090565b6200044862000439565b620004558184846200040e565b505050565b5b818110156200047d57620004716000826200043e565b6001810190506200045b565b5050565b601f821115620004cc57620004968162000340565b620004a18462000355565b81016020851015620004b1578190505b620004c9620004c08562000355565b8301826200045a565b50505b505050565b600082821c905092915050565b6000620004f160001984600802620004d1565b1980831691505092915050565b60006200050c8383620004de565b9150826002028217905092915050565b6200052782620002d1565b67ffffffffffffffff811115620005435762000542620000e8565b5b6200054f82546200030b565b6200055c82828562000481565b600060209050601f8311600181146200059457600084156200057f578287015190505b6200058b8582620004fe565b865550620005fb565b601f198416620005a48662000340565b60005b82811015620005ce57848901518255600182019150602085019450602081019050620005a7565b86831015620005ee5784890151620005ea601f891682620004de565b8355505b6001600288020188555050505b505050505050565b611af980620006136000396000f3fe6080604052600436106100f75760003560e01c80636f01935d1161008a5780639b80d687116100595780639b80d68714610339578063a457c2d714610343578063a9059cbb14610380578063dd62ed3e146103bd576100fe565b80636f01935d1461027d57806370a08231146102a65780637ffdf53e146102e357806395d89b411461030e576100fe565b806323b872dd116100c657806323b872dd146101c1578063313ce567146101fe5780633884d635146102295780633950935114610240576100fe565b806306fdde0314610103578063095ea7b31461012e57806318160ddd1461016b5780631b8e94a114610196576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b506101186103fa565b60405161012591906110c5565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190611180565b61048c565b60405161016291906111db565b60405180910390f35b34801561017757600080fd5b506101806104af565b60405161018d9190611205565b60405180910390f35b3480156101a257600080fd5b506101ab6104b9565b6040516101b89190611205565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190611220565b6104bf565b6040516101f591906111db565b60405180910390f35b34801561020a57600080fd5b506102136104ee565b604051610220919061128f565b60405180910390f35b34801561023557600080fd5b5061023e6104f7565b005b34801561024c57600080fd5b5061026760048036038101906102629190611180565b6105f7565b60405161027491906111db565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f91906112aa565b61062e565b005b3480156102b257600080fd5b506102cd60048036038101906102c891906112d7565b610724565b6040516102da9190611205565b60405180910390f35b3480156102ef57600080fd5b506102f861076c565b6040516103059190611205565b60405180910390f35b34801561031a57600080fd5b50610323610772565b60405161033091906110c5565b60405180910390f35b610341610804565b005b34801561034f57600080fd5b5061036a60048036038101906103659190611180565b6108cf565b60405161037791906111db565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a29190611180565b610946565b6040516103b491906111db565b60405180910390f35b3480156103c957600080fd5b506103e460048036038101906103df9190611304565b610969565b6040516103f19190611205565b60405180910390f35b60606003805461040990611373565b80601f016020809104026020016040519081016040528092919081815260200182805461043590611373565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b6000806104976109f0565b90506104a48185856109f8565b600191505092915050565b6000600254905090565b60085481565b6000806104ca6109f0565b90506104d7858285610bc1565b6104e2858585610c4d565b60019150509392505050565b60006012905090565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057b90611416565b60405180910390fd5b61059d336008546127106105989190611465565b610ecc565b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b6000806106026109f0565b90506106238185856106148589610969565b61061e91906114a7565b6109f8565b600191505092915050565b60008111610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890611527565b60405180910390fd5b8061067b33610724565b10156106bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b390611593565b60405180910390fd5b6000600754826106cc91906115e2565b90506106d9333084610c4d565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561071f573d6000803e3d6000fd5b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b60606004805461078190611373565b80601f01602080910402602001604051908101604052809291908181526020018280546107ad90611373565b80156107fa5780601f106107cf576101008083540402835291602001916107fa565b820191906000526020600020905b8154815290600101906020018083116107dd57829003601f168201915b5050505050905090565b60003411610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e9061165f565b60405180910390fd5b6000600754346108579190611465565b90506108633382610ecc565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156108cb573d6000803e3d6000fd5b5050565b6000806108da6109f0565b905060006108e88286610969565b90508381101561092d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610924906116f1565b60405180910390fd5b61093a82868684036109f8565b60019250505092915050565b6000806109516109f0565b905061095e818585610c4d565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e90611783565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acd90611815565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610bb49190611205565b60405180910390a3505050565b6000610bcd8484610969565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c475781811015610c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3090611881565b60405180910390fd5b610c4684848484036109f8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390611913565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d22906119a5565b60405180910390fd5b610d3683838361102b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db390611a37565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e4f91906114a7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eb39190611205565b60405180910390a3610ec6848484611030565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290611aa3565b60405180910390fd5b610f476000838361102b565b8060026000828254610f5991906114a7565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fae91906114a7565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110139190611205565b60405180910390a361102760008383611030565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561106f578082015181840152602081019050611054565b60008484015250505050565b6000601f19601f8301169050919050565b600061109782611035565b6110a18185611040565b93506110b1818560208601611051565b6110ba8161107b565b840191505092915050565b600060208201905081810360008301526110df818461108c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611117826110ec565b9050919050565b6111278161110c565b811461113257600080fd5b50565b6000813590506111448161111e565b92915050565b6000819050919050565b61115d8161114a565b811461116857600080fd5b50565b60008135905061117a81611154565b92915050565b60008060408385031215611197576111966110e7565b5b60006111a585828601611135565b92505060206111b68582860161116b565b9150509250929050565b60008115159050919050565b6111d5816111c0565b82525050565b60006020820190506111f060008301846111cc565b92915050565b6111ff8161114a565b82525050565b600060208201905061121a60008301846111f6565b92915050565b600080600060608486031215611239576112386110e7565b5b600061124786828701611135565b935050602061125886828701611135565b92505060406112698682870161116b565b9150509250925092565b600060ff82169050919050565b61128981611273565b82525050565b60006020820190506112a46000830184611280565b92915050565b6000602082840312156112c0576112bf6110e7565b5b60006112ce8482850161116b565b91505092915050565b6000602082840312156112ed576112ec6110e7565b5b60006112fb84828501611135565b91505092915050565b6000806040838503121561131b5761131a6110e7565b5b600061132985828601611135565b925050602061133a85828601611135565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061138b57607f821691505b60208210810361139e5761139d611344565b5b50919050565b7f5468697320757365722068617320636c61696d65642061697264726f7020616c60008201527f7265616479000000000000000000000000000000000000000000000000000000602082015250565b6000611400602583611040565b915061140b826113a4565b604082019050919050565b6000602082019050818103600083015261142f816113f3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114708261114a565b915061147b8361114a565b92508282026114898161114a565b915082820484148315176114a05761149f611436565b5b5092915050565b60006114b28261114a565b91506114bd8361114a565b92508282019050808211156114d5576114d4611436565b5b92915050565b7f4d757374207370656369667920616d6f756e7420746f20636f6e766572740000600082015250565b6000611511601e83611040565b915061151c826114db565b602082019050919050565b6000602082019050818103600083015261154081611504565b9050919050565b7f496e73756666696369656e742045524332302062616c616e6365000000000000600082015250565b600061157d601a83611040565b915061158882611547565b602082019050919050565b600060208201905081810360008301526115ac81611570565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115ed8261114a565b91506115f88361114a565b925082611608576116076115b3565b5b828204905092915050565b7f4d7573742073656e642045544820746f20636f6e766572740000000000000000600082015250565b6000611649601883611040565b915061165482611613565b602082019050919050565b600060208201905081810360008301526116788161163c565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006116db602583611040565b91506116e68261167f565b604082019050919050565b6000602082019050818103600083015261170a816116ce565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061176d602483611040565b915061177882611711565b604082019050919050565b6000602082019050818103600083015261179c81611760565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006117ff602283611040565b915061180a826117a3565b604082019050919050565b6000602082019050818103600083015261182e816117f2565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061186b601d83611040565b915061187682611835565b602082019050919050565b6000602082019050818103600083015261189a8161185e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006118fd602583611040565b9150611908826118a1565b604082019050919050565b6000602082019050818103600083015261192c816118f0565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061198f602383611040565b915061199a82611933565b604082019050919050565b600060208201905081810360008301526119be81611982565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611a21602683611040565b9150611a2c826119c5565b604082019050919050565b60006020820190508181036000830152611a5081611a14565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611a8d601f83611040565b9150611a9882611a57565b602082019050919050565b60006020820190508181036000830152611abc81611a80565b905091905056fea2646970667358221220e40086e0ebe620910e48631d8d6b6d6c6cad34c8fa60b5a86dcba4111054083d64736f6c63430008140033";

type MyERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyERC20__factory extends ContractFactory {
  constructor(...args: MyERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MyERC20> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MyERC20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): MyERC20 {
    return super.attach(address) as MyERC20;
  }
  override connect(signer: Signer): MyERC20__factory {
    return super.connect(signer) as MyERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyERC20Interface {
    return new utils.Interface(_abi) as MyERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MyERC20 {
    return new Contract(address, _abi, signerOrProvider) as MyERC20;
  }
}
